import java.util.stream.Stream
import jp.classmethod.aws.gradle.sqs.AmazonSQSSendMessagesTask;

buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
	}
	repositories {
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('jp.classmethod.aws:gradle-aws-plugin:0.+')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: "jp.classmethod.aws.sqs"

jar {
	baseName = 'spring-boot-aws-camel'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

ext {
    camelVersion = '2.17.2'
}

springBoot {
	mainClass = "com.github.sdavids13.camel.SpringBootAwsCamelApplication"
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile("org.apache.camel:camel-spring-boot-starter:${camelVersion}")
    compile("com.amazonaws:aws-java-sdk-sqs:1.10.52")

    runtime('javax.jms:jms-api')
    runtime("org.apache.camel:camel-jms:${camelVersion}")
    runtime("org.apache.camel:camel-aws:${camelVersion}")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("org.apache.camel:camel-test-spring:${camelVersion}")
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task sendMessages(type: AmazonSQSSendMessagesTask) {
    queueName 'spring-boot-aws'
    messages Stream.generate { "Message ${UUID.randomUUID()}".toString() }.limit(250)
}

